//  dMVC framework ------------------------

var _ = require('./lib/underscore');

var Obj = {
    selector: '',
    next: [
        {
            command: '',
            arguments: []
        }

    ]
};
var jqObject = function(selector) {
    this.selector = selector;
    this.next = [];
};
jqObject.prototype = {

    command: function(name, args) {
        args = args || [];
        this.next.push({
            command: name,
            arguments: _.isArray(args) ? args : [args]
        });
    }

};

var View = function (model) {

    this.modelID = model.id;

};

View.prototype = {

    setElement: function(el) {
        this.element = el;
    }

};

var Model = function (data) {

    _.extend(this, data);

};

Model.prototype = {

    save: function(req, res, next) {
        var self = this,
            task = new Controller._dbTask({
            userID: this.userID,
            task: this.task,
            done: this.done
        });
        task.save(function (err, task) {
            if (err) {
                res.json({error: err});
            } else {
                self.id = task._id;
                Controller.createView(self, req, res, next);
            }
        });
    }

};

var Controller = {

    getViews: function (req, res, next) {
        this._dbTask.find({userID: req.session.userID},function (err, tasks) {
            if (err) {
                res.json({error: err});
            } else {
                var models = _.map(tasks, function (obj) {
                    return new Model({
                        id: obj._id,
                        userID: obj.userID,
                        task: obj.task,
                        done: obj.done
                    });
                });
                res.json({models: models});
            }
            //console.log(kittens);
        })
    },

    addModel: function(req, res, next/*data*/) {
        var form = JSON.parse(req.body.evtObject),
            taskField = _.findWhere(form, {name: 'task'});
        var task = new Model({
            userID: req.session.userID,
            task: taskField.value,
            done: false
        });
        task.save(req, res, next);
    },

    removeModel: function(req, res, next) {
        var modelID = req.body.evtObject.target.id;
        Controller._dbTask.remove({_id: modelID}, function (err) {
            if (err) {
                res.json({error: err});
            } else {
                //res.json({removed: true});
                var removed = new jqObject('#' + modelID);
                removed.command('parent');
                removed.command('remove');
                res.json([removed]);

            }
        });
    },

    createView: function (model, req, res, next) {
        var link = new jqObject('<span id="' + model.id + '"> X</span>');
        var text = new jqObject('<li class="on_click">' + model.task + '</li>');
        text.command('append', link);
        var task = new jqObject('#tasks_block');
        task.command('append', text);
        res.json([task]);

        //res.json({model: model});
    }

};

//  dMVC framework end ------------------------


//  app -----------------------------------

var init = function(dbConnection) {

    //Controller._db = dbConnection;  //mongoose

    //TODO: remove db reference into the model via some kind of config
    var tasksSchema = dbConnection.Schema({
        userID: String,
        task: String,
        done: Boolean
    });
    //var Task = mongoose.model('Tasks', tasksSchema);
    Controller._dbTask = dbConnection.model('Tasks', tasksSchema);

};

module.exports.init = init;
module.exports.Controller = Controller;