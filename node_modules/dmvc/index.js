//  dMVC framework ------------------------

//var _ = require('./lib/underscore');
var _ = require('underscore');
//var Backbone = require('./lib/backbone');
var Backbone = require('backbone');

var Obj = {
    selector: '',
    next: [
        {
            command: '',
            arguments: []
        }

    ]
};


var jqObject = function(selector) {
    this.selector = selector;
    this.next = [];
};
jqObject.prototype = {

    command: function(name, args) {
        args = args || [];
        this.next.push({
            command: name,
            arguments: _.isArray(args) ? args : [args]
        });
    }

};

/*var Controller = {

    getViews: function (req, res, next) {
        this._dbTask.find({userID: req.session.userID},function (err, tasks) {
            if (err) {
                res.json({error: err});
            } else {
                var models = _.map(tasks, function (obj) {
                    return new Model({
                        id: obj._id,
                        userID: obj.userID,
                        task: obj.task,
                        done: obj.done
                    });
                });
                res.json({models: models});
            }
            //console.log(kittens);
        })
    },

    addModel: function(req, res, next*//*data*//*) {
        var form = JSON.parse(req.body.evtObject),
            taskField = _.findWhere(form, {name: 'task'});
        var task = new Model({
            userID: req.session.userID,
            task: taskField.value,
            done: false
        });
        task.save(req, res, next);
    },

    removeModel: function(req, res, next) {
        var modelID = req.body.evtObject.target.id;
        Controller._dbTask.remove({_id: modelID}, function (err) {
            if (err) {
                res.json({error: err});
            } else {
                //res.json({removed: true});
                var removed = new jqObject('#' + modelID);
                removed.command('parent');
                removed.command('remove');
                res.json([removed]);

            }
        });
    },

    createView: function (model, req, res, next) {
        var link = new jqObject('<span id="' + model.id + '"> X</span>');
        var text = new jqObject('<li class="on_click">' + model.task + '</li>');
        text.command('append', link);
        var task = new jqObject('#tasks_block');
        task.command('append', text);
        res.json([task]);

        //res.json({model: model});
    }

};*/

var View = Backbone.View.extend({

    constructor: function(options) {
        Backbone.View.apply(this, arguments);
        if(options.transport) {
            this.transport = options.transport;
            //this.initTransport(options.transport);
        }
        //console.log('View.init: ', _.isObject(options.transport), this.cid);
    },

    _setElement: function(el) {
        //this.$el = el instanceof Backbone.$ ? el : Backbone.$(el);
        this.el = el/*this.$el[0]*/;
    },

    initTransport: function() {

        var self = this;
        this.transport.on('message', function (msg) {
            self.trigger(msg.event, msg.evtObject);
            self.transport.json.send({'event': 'message echo', 'message': msg});
        });
        // Client disconnection
        this.transport.on('disconnect', function() {
            /*var time = (new Date).toLocaleTimeString();
             io.sockets.json.send({'event': 'userSplit', 'name': ID, 'time': time});*/
        });
    },

    render: function() {

    }

});

var Collection = Backbone.Collection.extend({

});

var Model = Backbone.Model.extend({

    sync: function() {
        //to prevent ajax requests
    }

});


//  dMVC framework end ------------------------


//  app -----------------------------------

var Todo = Model.extend({

    defaults: {
        done: false
    }

});

var TodoView = View.extend({

    initialize: function() {
        this.model.on('change', this.update, this);
        this.model.on('destroy', this.remove, this);
        //this.render();
        //console.log('TodoView initialize: ', this.transport);
    },
    render: function() {
        var link = new jqObject('<span id="' + this.model.id + '"> X</span>');
        var text = new jqObject('<li class="on_click">' + this.model.task + '</li>');
        text.command('append', link);
        var task = new jqObject('#tasks_block');
        task.command('append', text);
        //console.log('TodoView render: ', _.isObject(this.transport.json));
        this.transport.json.send([task]);
    },
    update: function() {

    },
    remove: function() {

    }

});

var TodoCollection = Collection.extend({
    model: Todo,
    url: '/',

    init: function(conn, userID) {
        this.dbConnection = conn;
        this.userID = userID;
        //this.fetch();
    }

});
var Tasks = new TodoCollection();

var TodoApp = View.extend({

    initialize: function() {
        //this.listenTo(Tasks, 'add', this.addTask);
        Tasks.on('add', this.createTaskView, this);
        this.on('submit', this.addTask, this);
        this.on('click', this.taskClicked, this);
        //Tasks.fetch();
    },

    taskClicked: function(evtObject) {
        Tasks.findWhere({})
    },

    createTaskView: function(task) {
        /*task.on('change', this.changeTask, this);
        task.on('destroy', this.removeTask, this);*/
        var view = new TodoView({
            el: {},
            model: task,
            transport: this.transport
        });
        //console.log('createTaskView: ', _.isObject(view.transport));
        view.render();
        //this.transport.json.send({'event': 'task create', 'task': view.parent});

    },

    /**
     *
     * @param task {Array} [{"type":"text","name":"task","value":"fgh"},{"type":"submit","name":"","value":""}]
     */
    addTask: function(task) {

        /*userID: req.session.userID,
            task: taskField.value,
            done: false*/
        Tasks.create({task: task[0].value});
        //console.log('addTask: ', Tasks);
    }

});


var init = function(socket, session, dbConnection) {

    Tasks.init(dbConnection, session.userID);
    var app = new TodoApp({el: {}, transport: socket});
    app.initTransport();

    //app.render();

    //var userID = session.userID;

    // Input message
    /*socket.on('message', function (msg) {
        socket.json.send({'event': 'message echo', 'message': msg, user: userID});
    });*/

    // Client disconnection
    /*socket.on('disconnect', function() {

    });*/



    //Controller._db = dbConnection;  //mongoose

    //TODO: remove db reference into the model via some kind of config
    /*var tasksSchema = dbConnection.Schema({
        userID: String,
        task: String,
        done: Boolean
    });
    //var Task = mongoose.model('Tasks', tasksSchema);
    Controller._dbTask = dbConnection.model('Tasks', tasksSchema);*/

};

module.exports.init = init;
//module.exports.Controller = Controller;